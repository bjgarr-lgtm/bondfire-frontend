{"version":3,"file":"MatrixRTCSessionManager.js","names":["ClientEvent","TypedEventEmitter","RoomStateEvent","MatrixRTCSession","EventType","MatrixRTCSessionManagerEvents","MatrixRTCSessionManager","constructor","rootLogger","client","_defineProperty","Map","room","refreshRoom","event","_state","getRoom","getRoomId","logger","error","concat","getType","GroupCallMemberPrefix","getChild","start","_this$client$getRooms","getRooms","session","roomSessionForRoom","memberships","length","roomSessions","set","roomId","on","Room","onRoom","Events","onRoomState","stop","sess","values","clear","off","getActiveRoomSession","get","getRoomSession","has","isNewSession","wasActiveAndKnown","onRTCSessionMemberUpdate","nowActive","trace","emit","SessionEnded","SessionStarted"],"sources":["../../src/matrixrtc/MatrixRTCSessionManager.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { type Logger } from \"../logger.ts\";\nimport { type MatrixClient, ClientEvent } from \"../client.ts\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\nimport { type Room } from \"../models/room.ts\";\nimport { type RoomState, RoomStateEvent } from \"../models/room-state.ts\";\nimport { type MatrixEvent } from \"../models/event.ts\";\nimport { MatrixRTCSession } from \"./MatrixRTCSession.ts\";\nimport { EventType } from \"../@types/event.ts\";\n\nexport enum MatrixRTCSessionManagerEvents {\n    // A member has joined the MatrixRTC session, creating an active session in a room where there wasn't previously\n    SessionStarted = \"session_started\",\n    // All participants have left a given MatrixRTC session.\n    SessionEnded = \"session_ended\",\n}\n\ntype EventHandlerMap = {\n    [MatrixRTCSessionManagerEvents.SessionStarted]: (roomId: string, session: MatrixRTCSession) => void;\n    [MatrixRTCSessionManagerEvents.SessionEnded]: (roomId: string, session: MatrixRTCSession) => void;\n};\n\n/**\n * Holds all active MatrixRTC session objects and creates new ones as events arrive.\n * This interface is UNSTABLE and may change without warning.\n */\nexport class MatrixRTCSessionManager extends TypedEventEmitter<MatrixRTCSessionManagerEvents, EventHandlerMap> {\n    // All the room-scoped sessions we know about. This will include any where the app\n    // has queried for the MatrixRTC sessions in a room, whether it's ever had any members\n    // or not). We keep a (lazily created) session object for every room to ensure that there\n    // is only ever one single room session object for any given room for the lifetime of the\n    // client: that way there can never be any code holding onto a stale object that is no\n    // longer the correct session object for the room.\n    private roomSessions = new Map<string, MatrixRTCSession>();\n\n    private readonly logger: Logger;\n\n    public constructor(\n        rootLogger: Logger,\n        private client: MatrixClient,\n    ) {\n        super();\n        this.logger = rootLogger.getChild(\"[MatrixRTCSessionManager]\");\n    }\n\n    public start(): void {\n        // We shouldn't need to null-check here, but matrix-client.spec.ts mocks getRooms\n        // returning nothing, and breaks tests if you change it to return an empty array :'(\n        for (const room of this.client.getRooms() ?? []) {\n            const session = MatrixRTCSession.roomSessionForRoom(this.client, room);\n            if (session.memberships.length > 0) {\n                this.roomSessions.set(room.roomId, session);\n            }\n        }\n\n        this.client.on(ClientEvent.Room, this.onRoom);\n        this.client.on(RoomStateEvent.Events, this.onRoomState);\n    }\n\n    public stop(): void {\n        for (const sess of this.roomSessions.values()) {\n            void sess.stop();\n        }\n        this.roomSessions.clear();\n\n        this.client.off(ClientEvent.Room, this.onRoom);\n        this.client.off(RoomStateEvent.Events, this.onRoomState);\n    }\n\n    /**\n     * Gets the main MatrixRTC session for a room, or undefined if there is\n     * no current session\n     */\n    public getActiveRoomSession(room: Room): MatrixRTCSession | undefined {\n        return this.roomSessions.get(room.roomId)!;\n    }\n\n    /**\n     * Gets the main MatrixRTC session for a room, returning an empty session\n     * if no members are currently participating\n     */\n    public getRoomSession(room: Room): MatrixRTCSession {\n        if (!this.roomSessions.has(room.roomId)) {\n            this.roomSessions.set(room.roomId, MatrixRTCSession.roomSessionForRoom(this.client, room));\n        }\n\n        return this.roomSessions.get(room.roomId)!;\n    }\n\n    private onRoom = (room: Room): void => {\n        this.refreshRoom(room);\n    };\n\n    private onRoomState = (event: MatrixEvent, _state: RoomState): void => {\n        const room = this.client.getRoom(event.getRoomId());\n        if (!room) {\n            this.logger.error(`Got room state event for unknown room ${event.getRoomId()}!`);\n            return;\n        }\n\n        if (event.getType() == EventType.GroupCallMemberPrefix) {\n            this.refreshRoom(room);\n        }\n    };\n\n    private refreshRoom(room: Room): void {\n        const isNewSession = !this.roomSessions.has(room.roomId);\n        const session = this.getRoomSession(room);\n\n        const wasActiveAndKnown = session.memberships.length > 0 && !isNewSession;\n        // This needs to be here and the event listener cannot be setup in the MatrixRTCSession,\n        // because we need the update to happen between:\n        // wasActiveAndKnown = session.memberships.length > 0 and\n        // nowActive = session.memberships.length\n        // Alternatively we would need to setup some event emission when the RTC session ended.\n        session.onRTCSessionMemberUpdate();\n\n        const nowActive = session.memberships.length > 0;\n\n        if (wasActiveAndKnown && !nowActive) {\n            this.logger.trace(`Session ended for ${room.roomId} (${session.memberships.length} members)`);\n            this.emit(MatrixRTCSessionManagerEvents.SessionEnded, room.roomId, this.roomSessions.get(room.roomId)!);\n        } else if (!wasActiveAndKnown && nowActive) {\n            this.logger.trace(`Session started for ${room.roomId} (${session.memberships.length} members)`);\n            this.emit(MatrixRTCSessionManagerEvents.SessionStarted, room.roomId, this.roomSessions.get(room.roomId)!);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]}